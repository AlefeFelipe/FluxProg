int angulo = (atan2((mouseX - temporary_line_X), (mouseY - temporary_line_Y)))*180/M_PI;

        int angulo1 = angulo + 45;
        int angulo2 = angulo - 45;
        //cout<<"angulo principal: "<<angulo<<endl;
        //cout<<"angulo 1: "<<angulo1<<endl;
        //cout<<"angulo 2: "<<angulo2<<endl;
        float tan1 = tan(angulo1);
        float tan2 = tan(angulo2);

        //eq das retas que formam a flecha
        //1. (arrow_Y1 - mouseY) = tan1 * (arrow_X1 - mouseX)
        //2. (arrow_Y2 - mouseY) = tan2 * (arrow_X2 - mouseX)
        //utilizando a eq de distancia entre pontos, eu quero o ponto que passa pela reta 1 e estÃ¡ a uma distancia 10 do mouse.
        //10*10 = (arrow_Y1 - mouseY)*(arrow_Y1 - mouseY) + (arrow_X1 - mouseX)*(arrow_X1 - mouseX)
        //arrow_X1 = mouseX +/- 10*sqrt(1/(tan1*tan1) + 1);

        float root1 = 1/((tan1*tan1) + 1);
        if(mouseX >= temporary_line_X) {
            arrow_X1 = mouseX - 10 * sqrt(root1);
        } else {
            arrow_X1 = mouseX + 10 * sqrt(root1);
        }
        arrow_Y1 = (tan1 * (arrow_X1 - mouseX)) + mouseY;

        float root2 = 1/((tan2*tan2) + 1);
        if(mouseX <= temporary_line_X) {
            arrow_X2 = mouseX - 10 * sqrt(root2);
        } else {
            arrow_X2 = mouseX + 10 * sqrt(root2);
        }
        arrow_Y2 = (tan2 * (arrow_X2 - mouseX)) + mouseY;

        cout<<"mouse: "<<mouseX<<","<<mouseY<<endl;
        cout<<"x1: "<<arrow_X1<<endl;
        cout<<"y1: "<<arrow_Y1<<endl;

	al_draw_filled_triangle(mouseX, mouseY, arrow_X1, arrow_Y1, arrow_X2, arrow_Y2, black);
